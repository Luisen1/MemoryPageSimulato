#!/usr/bin/env python3
"""
Instalador autom√°tico para el Simulador de Paginaci√≥n de Memoria
"""

import os
import sys
import subprocess
import venv

def print_banner():
    """Imprime el banner de instalaci√≥n."""
    print("=" * 60)
    print("  INSTALADOR - SIMULADOR DE PAGINACI√ìN DE MEMORIA")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible."""
    print("Verificando versi√≥n de Python...")
    
    if sys.version_info < (3, 7):
        print("‚ùå Error: Se requiere Python 3.7 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version} - Compatible")
    return True

def create_virtual_environment():
    """Crea un entorno virtual."""
    print("\nCreando entorno virtual...")
    
    venv_path = os.path.join(os.getcwd(), "venv")
    
    if os.path.exists(venv_path):
        print("‚ö†Ô∏è  El entorno virtual ya existe, se reutilizar√°")
        return venv_path
    
    try:
        venv.create(venv_path, with_pip=True)
        print("‚úÖ Entorno virtual creado exitosamente")
        return venv_path
    except Exception as e:
        print(f"‚ùå Error creando entorno virtual: {e}")
        return None

def get_venv_python(venv_path):
    """Obtiene la ruta del ejecutable de Python del entorno virtual."""
    if os.name == 'nt':  # Windows
        return os.path.join(venv_path, "Scripts", "python.exe")
    else:  # Unix/Linux/Mac
        return os.path.join(venv_path, "bin", "python")

def install_dependencies(python_path):
    """Instala las dependencias necesarias."""
    print("\nInstalando dependencias...")
    
    dependencies = ["matplotlib"]
    
    for dep in dependencies:
        print(f"Instalando {dep}...")
        try:
            result = subprocess.run([python_path, "-m", "pip", "install", dep], 
                                  check=True, capture_output=True, text=True)
            print(f"‚úÖ {dep} instalado exitosamente")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando {dep}: {e}")
            print(f"   Salida: {e.stdout}")
            print(f"   Error: {e.stderr}")
            return False
    
    return True

def test_installation(python_path):
    """Prueba la instalaci√≥n ejecutando una demo r√°pida."""
    print("\nProbando instalaci√≥n...")
    
    test_script = '''
import sys
sys.path.insert(0, ".")

try:
    from src.controllers.simulator import MemorySimulator
    from src.utils.constants import ProcessState
    
    # Crear simulador
    simulator = MemorySimulator()
    
    # Crear un proceso de prueba
    process = simulator.create_and_allocate_process("Test", 4096)
    
    if process:
        print("‚úÖ Simulador funcionando correctamente")
        print(f"   Proceso creado: {process.name} (PID {process.pid})")
        print(f"   Marcos asignados: {process.allocated_frames}")
        
        # Limpiar
        simulator.memory_manager.deallocate_memory(process)
        print("‚úÖ Limpieza completada")
    else:
        print("‚ùå Error creando proceso de prueba")
        
except Exception as e:
    print(f"‚ùå Error en la prueba: {e}")
    '''
    
    try:
        result = subprocess.run([python_path, "-c", test_script], 
                              check=True, capture_output=True, text=True)
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en la prueba: {e}")
        print(f"   Salida: {e.stdout}")
        print(f"   Error: {e.stderr}")
        return False

def create_run_scripts(python_path):
    """Crea scripts de ejecuci√≥n para facilitar el uso."""
    print("\nCreando scripts de ejecuci√≥n...")
    
    # Script para Windows
    if os.name == 'nt':
        # Script para consola
        console_script = f'''@echo off
echo Ejecutando Simulador en modo consola...
"{python_path}" demo_console.py
pause
'''
        with open("run_console.bat", "w") as f:
            f.write(console_script)
        
        # Script para GUI simple
        gui_script = f'''@echo off
echo Ejecutando Simulador con interfaz gr√°fica...
"{python_path}" gui_simple.py
'''
        with open("run_gui.bat", "w") as f:
            f.write(gui_script)
        
        print("‚úÖ Scripts creados: run_console.bat, run_gui.bat")
    
    # Script para Unix/Linux/Mac
    else:
        # Script para consola
        console_script = f'''#!/bin/bash
echo "Ejecutando Simulador en modo consola..."
"{python_path}" demo_console.py
'''
        with open("run_console.sh", "w") as f:
            f.write(console_script)
        os.chmod("run_console.sh", 0o755)
        
        # Script para GUI
        gui_script = f'''#!/bin/bash
echo "Ejecutando Simulador con interfaz gr√°fica..."
"{python_path}" gui_simple.py
'''
        with open("run_gui.sh", "w") as f:
            f.write(gui_script)
        os.chmod("run_gui.sh", 0o755)
        
        print("‚úÖ Scripts creados: run_console.sh, run_gui.sh")

def print_usage_instructions(python_path):
    """Imprime las instrucciones de uso."""
    print("\n" + "=" * 60)
    print("  INSTALACI√ìN COMPLETADA EXITOSAMENTE")
    print("=" * 60)
    
    print("\nüìã FORMAS DE EJECUTAR EL SIMULADOR:")
    print("\n1. üñ•Ô∏è  Modo Consola (Demostraci√≥n autom√°tica):")
    if os.name == 'nt':
        print("   - Hacer doble clic en: run_console.bat")
        print("   - O ejecutar: python demo_console.py")
    else:
        print("   - Ejecutar: ./run_console.sh")
        print("   - O ejecutar: python demo_console.py")
    
    print("\n2. üñºÔ∏è  Modo GUI Simplificado (Interfaz gr√°fica):")
    if os.name == 'nt':
        print("   - Hacer doble clic en: run_gui.bat")
        print("   - O ejecutar: python gui_simple.py")
    else:
        print("   - Ejecutar: ./run_gui.sh")
        print("   - O ejecutar: python gui_simple.py")
    
    print("\n3. üé® Modo GUI Completo (Con matplotlib):")
    print("   - Ejecutar: python main.py")
    
    print("\nüìö CARACTER√çSTICAS PRINCIPALES:")
    print("   ‚úÖ Simulaci√≥n de paginaci√≥n sin memoria virtual")
    print("   ‚úÖ Modelo completo de 7 estados de procesos")
    print("   ‚úÖ Asignaci√≥n din√°mica de marcos de memoria")
    print("   ‚úÖ Tablas de p√°ginas individuales por proceso")
    print("   ‚úÖ Traducci√≥n de direcciones l√≥gicas a f√≠sicas")
    print("   ‚úÖ Visualizaci√≥n gr√°fica del estado del sistema")
    
    print("\nüîß CONFIGURACI√ìN DEL SISTEMA:")
    print("   ‚Ä¢ Tama√±o de p√°gina: 4096 bytes (4 KB)")
    print("   ‚Ä¢ Memoria f√≠sica total: 64 KB")
    print("   ‚Ä¢ N√∫mero de marcos: 16")
    print("   ‚Ä¢ Capacidad: 3+ procesos simult√°neos")
    
    print("\nüìñ Para m√°s informaci√≥n, consulte README.md")
    print("=" * 60)

def main():
    """Funci√≥n principal del instalador."""
    print_banner()
    
    # Verificar Python
    if not check_python_version():
        return False
    
    # Crear entorno virtual
    venv_path = create_virtual_environment()
    if not venv_path:
        return False
    
    # Obtener ruta del Python del entorno virtual
    python_path = get_venv_python(venv_path)
    
    # Verificar que el Python del entorno virtual existe
    if not os.path.exists(python_path):
        print(f"‚ùå Error: No se encontr√≥ Python en {python_path}")
        return False
    
    # Instalar dependencias
    if not install_dependencies(python_path):
        return False
    
    # Probar instalaci√≥n
    if not test_installation(python_path):
        return False
    
    # Crear scripts de ejecuci√≥n
    create_run_scripts(python_path)
    
    # Mostrar instrucciones
    print_usage_instructions(python_path)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå La instalaci√≥n fall√≥. Consulte los errores anteriores.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Instalaci√≥n cancelada por el usuario.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante la instalaci√≥n: {e}")
        sys.exit(1)
